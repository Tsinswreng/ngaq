import * as mysql from 'mysql';
export declare class SingleWord {
    private _ling;
    private _id;
    private _wordShape;
    private _fullComments;
    private _addedDates;
    private _datesFormats;
    private _addedDates_datesFormats;
    private _addedTimes;
    get ling(): string;
    set ling(value: string);
    get id(): number;
    set id(value: number);
    get wordShape(): string;
    set wordShape(value: string);
    get fullComments(): string[];
    set fullComments(value: string[]);
    get addedDates(): string[];
    set addedDates(value: string[]);
    get datesFormats(): string[];
    set datesFormats(value: string[]);
    get addedDates_datesFormats(): Map<string, string>;
    set addedDates_datesFormats(value: Map<string, string>);
    get addedTimes(): number;
    set addedTimes(value: number);
    constructor();
}
export default class VocaRaw {
    static readonly configFilePath: string;
    private _xmlSrc;
    private _alreadyAdded;
    private _ling;
    private _dbName;
    private _tableName;
    private _dbUserName;
    private _dbPassword;
    private _srcFilePath;
    private _wordShape_fullComment;
    private _wordShape_fullCommentMap;
    private _wordShape_addedDatesMap;
    private _wordShape_datesFormats;
    private _wordShape_freq;
    private _srcStr;
    private _singleWords;
    private _wordUnits;
    get xmlSrc(): string;
    set xmlSrc(value: string);
    get dbUserName(): string;
    set dbUserName(value: string);
    get dbPassword(): string;
    set dbPassword(value: string);
    get alreadyAdded(): boolean;
    set alreadyAdded(value: boolean);
    get ling(): string;
    set ling(value: string);
    get dbName(): string;
    set dbName(value: string);
    get tableName(): string;
    set tableName(value: string);
    get srcFilePath(): string;
    set srcFilePath(value: string);
    get wordShape_fullComment(): {
        [p: string]: string;
    };
    set wordShape_fullComment(value: {
        [p: string]: string;
    });
    get wordShape_fullCommentMap(): Map<string, string[]>;
    set wordShape_fullCommentMap(value: Map<string, string[]>);
    get wordShape_addedDatesMap(): Map<string, string[]>;
    set wordShape_addedDatesMap(value: Map<string, string[]>);
    get wordShape_datesFormats(): Map<string, string[]>;
    set wordShape_datesFormats(value: Map<string, string[]>);
    get wordShape_freq(): Array<Map<string, number>>;
    set wordShape_freq(value: Array<Map<string, number>>);
    get srcStr(): string;
    set srcStr(value: string);
    get singleWords(): SingleWord[];
    set singleWords(value: SingleWord[]);
    get wordUnits(): any[];
    set wordUnits(value: any[]);
    constructor();
    init(): void;
    setSrcFilePath(srcFilePath: string): void;
    getSrcFilePath(): string;
    getContentOfMaps(): void;
    getSingleWordsFromMap_(): void;
    取詞ᵗ單元及附日期(str: string, dateFormat?: string): any[];
    convertDateFormat(): void;
    /**
    * 把單詞從txt加進數據庫裏
    *
    */
    addSingleWordsToDb(filePath?: string): Promise<any>;
    printAllRecords(): void;
    creatTableSync(tableName?: string): void;
    dropTableSync(tableName?: string): void;
    resetTable(): void;
    getDbConnection(): mysql.Connection;
    static getDbObj(dbName?: string): mysql.Connection;
    getDbObj2(): any;
    clearDbTekTable(dbName?: string, tableName?: string): void;
    getAllSingleWordsSync(): Promise<unknown>;
    backupTable(): Promise<any>;
    static getObjsByConfig(): VocaRaw[];
    static updateDb(dataToReturn: {
        ling: string;
        id: number;
        rememberedDates: string[];
        forgottenDates: string[];
    }[]): void;
    static _ᵗ音標中括號ˇ轉換潙_(str: string, leftReplace: string, rightReplace: string): string;
    static _isProperSubsetOf_<T>(a: Set<T>, b: Set<T>): boolean;
    static arraysEqual(a: Array<any>, b: Array<any>): boolean;
    static differenceSetAMinusSetB<T>(setA: Set<T>, setB: Set<T>): Set<T>;
    static jsonConcatArr(jsonStr: string, arr: any[]): string;
    static addNewLinesAroundBraces(str: string): string;
    static 處理詞塊ᵗ中括號(str: string): string;
    static readFileSync(filePath: string): string;
    static removeEmptyLinesInBrackets(str: string): string;
    static 轉義ᵣ中括號ʸᵗ空行(str: string): string;
    static forEach_doFn_(obj: any[], fn: object): void;
    查重(): Promise<Map<string, number[]>>;
    刪重(詞_重複ᵗid: Map<string, number[]>): void;
    第三步(): Promise<void>;
    static 括號匹配檢查(str: string): boolean;
}
